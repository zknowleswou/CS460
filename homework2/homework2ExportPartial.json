[{"type":"header","value":"Discoveries!"},{"type":"paragraph","value":"My first pass worked a lot better than expected. I did notice a few things that i wanted to improve. First, line endings are not saved on the paragraph elements. This is ok because I can just create a new <code>&lt;p&gt;</code> if I want a new line. A bigger issue was being able to go back and edit my work if needed."},{"type":"paragraph","value":"I decided I was going to use <code>localStorage</code> and started work on that. I quickly found that local storage does not work for websites loaded as files from the filesystem. Not a problem though. A simple import/export system will work just fine. Let's take a look at how I implemented that."},{"type":"codeBlock","value":"    <div id=\"importExportPanel\" class=\"row\">\n        <div class=\"col-lg-12\">\n            <h3 style=\"display:inline-block;margin-right: 50px;\">Import/Export</h3>\n            <div style=\"display: inline-block;text-align: right;\">\n                <button id=\"exportBtn\" class=\"btn btn-primary btn-sm\" style=\"margin-right:30px;\">Export</button>\n                <button id=\"importBtn\" class=\"btn btn-primary btn-sm\">Import</button>\n            </div>\n        </div>\n\n        <div class=\"col-lg-12\">\n            <textarea id=\"importExportValue\" style=\"width:100%;min-height:50vh;\"></textarea>\n        </div>\n    </div>"},{"type":"codeBlock","value":"    exportWorkspace: function () {\n        var workspaceString = JSON.stringify(this.createElementArray());\n        $(\"#importExportValue\").val(workspaceString);\n    }"},{"type":"paragraph","value":"It was very simple to export my current workspace. I was already storing a representation of the blog post in an array. So all I had to do was get the array and call <code>JSON.stringyfy()</code>."},{"type":"header","value":"Where are the values?"},{"type":"paragraph","value":"Oops. I was not storing the values of each element in my array. That's ok though, I used a very simple element id setup so it was easy to fetch using the jQuery selector."},{"type":"codeBlock","value":"    createElementArray: function () {\n        var elementArray = [];\n        this.elements.forEach(element => {\n            elementArray.push({\n                type: element.type,\n                value: $(`#element_${element.elementId}_val`).val()\n            });\n        });\n\n        return elementArray;\n    }"},{"type":"header","value":"What about the import?"},{"type":"paragraph","value":"I can now save my workspace in a text file. What about when I want to open it up and make some changes? This required a little bit more work. It was not too bad though, I was already using functions to create my elements. I just needed to use those functions again. One change I had to make was to have my create element functions return the element id so that i could use a selector to set its value."},{"type":"codeBlock","value":"    importWorkspace: function () {\n        var importString = $(\"#importExportValue\").val();\n        if (importString.length === 0 || importString === \"[]\")\n            return;\n\n        $(\"#buildElementList\").html(\"\");    \n        var workspace = JSON.parse(importString);\n\n        this.elements = [];\n\n        workspace.forEach(element => {\n            var elementId = elementBuilder.createElement(element.type);\n            console.log(elementId);\n            $(`#element_${elementId}_val`).val(element.value);\n        });\n\n        $(\"#buildBtn\").click();\n    }"},{"type":"header","value":"Navigation"},{"type":"paragraph","value":"Navigation was done using simple hide/show calls on content <code>div</code>s. I added in add/remove class calls on the tab navigation too. This logic lives in my <code>events.js</code> file."},{"type":"codeBlock","value":"    $(\"#buildBtn\").on(\"click\", function () {\n        $(\"#buildPanel\").show();\n        $(\"#buildBtn\").addClass(\"active\");\n\n        $(\"#rawPanel\").hide();\n        $(\"#rawBtn\").removeClass(\"active\");\n\n        $(\"#importExportPanel\").hide();\n        $(\"#importExportBtn\").removeClass(\"active\");\n    })"},{"type":"paragraph","value":"There is some code duplication in there, but for a project this small we are going to let that go."},{"type":"header","value":"Did I cover everything?"},{"type":"paragraph","value":"No, I did not. There is a lot to cover and I just wanted to go over some of the more important items in detail. Here is a list of things,which I have to make by hand because I didnt include a <code>&lt;ul&gt;</code> template, that I skipped."},{"type":"header","value":"Where are the comments?"},{"type":"paragraph","value":"I didnt write any comments. Typically I try to write my code in a human readable format using descriptive variable and function names. As the code changes over time comments quickly become out of date and can be totally incorrect. As such, comments are best saved for complicated code or business logic and used sparingly. I understand that in this class I need to go back and add comments in to explain my thought process. I will do so in a later commit."}]